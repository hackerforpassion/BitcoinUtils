// ============================================================================
// FileName: ConsensusTestConsole.cpp
//
// Description:
// A small console application to test the consensus library from bitcoin-core.
// 
// Author(s):
// Aaron Clauson (https://github.com/sipsorcery)
//
// History:
// 12 Sep 2017  Aaron Clauson          Created.
//
// License: 
// Public Domain
// =============================================================================

#include <iostream>

#include "bitcoinconsensus.h"

int main()
{
	/* GOOD P2PK transaction. 
		https://bitcoin.org/en/developer-guide#pubkey
		Pubkey script: <pubkey> OP_CHECKSIG
		Signature script: <sig>
	*/
	unsigned char p2pkScriptPubKey[] = { 
		0x21, // OP_PUSHDATA 33 <data>	
		0x02, 0x4a, 0x36, 0xf1, 0x36, 0xbd, 0x7c, 0x11, 0x4c, 0x59, 0x9e, 0xfc, 0x07, 0xbc, 0xba, 0x8a, 0xc3, 0x2e, 0xa6, 0xeb, 0xaf, 0x8e, 0x1e, 0x20, 0x9f, 0x91, 0x31, 0x6d, 0x9b, 0xd2, 0xeb, 0x74, 0xe3,
		0xac, // OP_CHECKSIG
	};

	unsigned char p2pkTxTo[] = { 
		0x01, 0x00, 0x00, 0x00, // Version
		0x01,					// Input count
		0xb7, 0xe2, 0x4b, 0x63, 0x65, 0xaf, 0x16, 0x86, 0x5e, 0x38, 0x79, 0xb6, 0xd8, 0x73, 0x8f, 0x1f, 0xc1, 0xa7, 0x6a, 0xd0, 0xc9, 0xcb, 0xf5, 0x57, 0x2d, 0x87, 0x04, 0x64, 0xfe, 0x60, 0x3c, 0x1a, // Previous tx hash
		0x00, 0x00, 0x00, 0x00, // Previous output index
		0x48,					// scriptSig length
		//scriptSig:
		0x47, // OP_PUSHDATA 71 <data (signature of this transaction)>
		0x30, 0x44, 0x02, 0x20, 0x1a, 0xf9, 0x1f, 0xd6, 0x2a, 0x3d, 0x75, 0x2b, 0x6d, 0x41, 0x52, 0x0e, 0x84, 0x63, 0x91, 0x64, 0xe5, 0xc0, 0x9f, 0xfa, 0x13,	0xc4, 0x12, 0xca, 0x54, 0xe6, 0x6b, 
		0x22, 0x8a, 0xec, 0x72, 0x8d, 0x02, 0x20, 0x22, 0x70, 0xe9, 0x76, 0xc4, 0x9c, 0xad, 0x3b, 0x2b, 0x9b, 0x59,	0x15, 0x4d, 0x77, 0x7b, 0x0f, 0x3d, 0xaf, 0x48, 0xc8, 0x5f, 0x6e, 0xbc, 0xc3, 0x68, 
		0x5f, 0xf8, 0x05, 0x6b, 0x32, 0xaf, 0xc2, 0x01,			
		0x00, 0x00,	0x00, 0x00, // Sequence
		0x01,					// Output count.
		0x00, 0xf2, 0x05, 0x2a, 0x01, 0x00, 0x00, 0x00, // Amount
		0x01,					// scriptPubKey (for receiver) length
		0x51,					// scriptPubKey (for receiver)
		0x00, 0x00, 0x00, 0x00	// Lock time
	};

	/* ------------------------------------------------------------------------ */

	/* GOOD P2PKH transaction. 
		https://bitcoin.org/en/developer-guide#pay-to-public-key-hash-p2pkh
		Pubkey script: OP_DUP OP_HASH160 <PubKeyHash> OP_EQUALVERIFY OP_CHECKSIG
		Signature script: <sig> <pubkey>
	*/
	unsigned char p2pkhScriptPubKey[] = {
		0x76, // OP_DUP 
		0xa9, // OP_HASH160 
		0x14, // OP_PUSHDATA 20 <data (hash of public key of spender)>
		0x11, 0x2b, 0xe9, 0x7a, 0x96, 0x5d, 0xc4, 0x7c, 0x0c, 0xc6, 0x41, 0x19, 0x1c, 0x30, 0xe9, 0xfe, 0x8a, 0xe6, 0x79, 0x71,
		0x88, // OP_EQUALVERIFY
		0xac  // OP_CHECKSIG
	};

	unsigned char p2pkhTxTo[] = {
		0x01, 0x00, 0x00, 0x00, // Version
		0x01,					// Input count
		0xb7, 0xe2, 0x4b, 0x63, 0x65, 0xaf, 0x16, 0x86, 0x5e, 0x38, 0x79, 0xb6, 0xd8, 0x73, 0x8f, 0x1f, 0xc1, 0xa7, 0x6a, 0xd0, 0xc9, 0xcb, 0xf5, 0x57, 0x2d, 0x87, 0x04, 0x64, 0xfe, 0x60, 0x3c, 0x1a, // Previous tx hash
		0x00, 0x00, 0x00, 0x00, // Previous output index
		0x6b,					// scriptSig length
		// scriptSig:
		0x48, // OP_PUSHDATA 72 <data (signature of this transaction)>	
		0x30, 0x45, 0x02, 0x21, 0x00, 0x9e, 0x22, 0x05, 0x64, 0x0e, 0x58, 0x6b, 0x0c, 0xdb, 0xde, 0xa7, 0x97, 0x55, 0xac, 0xe3, 0x07, 0x14, 0xd2, 0x8d, 0x64, 0xf7, 0x6d, 0x56, 0x74, 0xd2, 0x96, 0x43,
		0x36, 0x7c, 0x8f, 0x18, 0xe3, 0x02, 0x20, 0x43, 0xe7, 0x7a, 0x3a, 0xf8, 0xcc, 0xf1, 0x90, 0x0d, 0xce, 0x7b, 0x8b, 0xe3, 0x46, 0x41, 0x40, 0xe7, 0xdd, 0x7c, 0xe9, 0x74, 0x05, 0xa7, 0x22, 0xee,
		0x22, 0xd7, 0xb6, 0xf6, 0x5f, 0x74, 0x3d, 0x01,
		0x21, // OP_PUSHDATA 33 <data (public key of spender)>
		0x02, 0x4a, 0x36, 0xf1, 0x36, 0xbd, 0x7c, 0x11, 0x4c, 0x59, 0x9e, 0xfc, 0x07, 0xbc, 0xba, 0x8a, 0xc3, 0x2e, 0xa6, 0xeb, 0xaf, 0x8e, 0x1e, 0x20, 0x9f, 0x91, 0x31, 0x6d, 0x9b, 0xd2, 0xeb, 0x74, 0xe3,
		0x00, 0x00,	0x00, 0x00, // Sequence
		0x01,					// Output count.
		0x00, 0xf2, 0x05, 0x2a, 0x01, 0x00, 0x00, 0x00, // Amount
		0x01,					// scriptPubKey (for receiver) length
		0x51,					// scriptPubKey (for receiver)
		0x00, 0x00, 0x00, 0x00	// Lock time
	};

	/* ------------------------------------------------------------------------ */

	/* GOOD P2SH transaction. 
	    https://bitcoin.org/en/developer-guide#pay-to-script-hash-p2sh
		Pubkey script: OP_HASH160 <Hash160(redeemScript)> OP_EQUAL
		Signature script: <sig> [sig] [sig...] <redeemScript>
	*/
	unsigned char p2shScriptPubKey[] = {
		0xa9, // OP_HASH160 
		0x14, // OP_PUSHDATA 20 <data (Hash160(redeemScript))>
		0xda, 0x17, 0x45, 0xe9, 0xb5, 0x49, 0xbd, 0x0b, 0xfa, 0x1a, 0x56, 0x99, 0x71, 0xc7, 0x7e, 0xba, 0x30, 0xcd, 0x5a, 0x4b,
		0x87, // OP_EQUAL
	};

	unsigned char p2shTxTo[] = {
		0x01, 0x00, 0x00, 0x00, // Version
		0x01,					// Input count
		0xb7, 0xe2, 0x4b, 0x63, 0x65, 0xaf, 0x16, 0x86, 0x5e, 0x38, 0x79, 0xb6, 0xd8, 0x73, 0x8f, 0x1f, 0xc1, 0xa7, 0x6a, 0xd0, 0xc9, 0xcb, 0xf5, 0x57, 0x2d, 0x87, 0x04, 0x64, 0xfe, 0x60, 0x3c, 0x1a, // Previous tx hash
		0x00, 0x00, 0x00, 0x00, // Previous output index
		0x02,					// scriptSig length
		// scriptSig (redeem script): 
		0x01, 0x51, // OP_PUSHDATA1 OP_TRUE
		0x00, 0x00,	0x00, 0x00, // Sequence
		0x01,					// Output count.
		0x00, 0xf2, 0x05, 0x2a, 0x01, 0x00, 0x00, 0x00, // Amount
		0x01,					// scriptPubKey (for receiver) length
		0x51,					// scriptPubKey (for receiver)
		0x00, 0x00, 0x00, 0x00	// Lock time
	};

	/* --- */

	/* GOOD arbitrary script test template.  
	   Not accepted by full nodes and miners (see link below) but useful for didactic purposes.
		https://bitcoin.org/en/developer-guide#non-standard-transactions
	*/
	unsigned char opTrueScriptPubKey[] = { 0x51 }; //  [0x51 = OP_TRUE]

	unsigned char opTrueTxTo[] = {
		0x01, 0x00, 0x00, 0x00,		// Version
		0x01,						// Input count
		// Input
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Previous tx hash
		0x00, 0x00, 0x00, 0x00,		// Previous output index
		0x01,						// Script length
		0x61,						// scriptSig [0x61 = OP_NOP]
		0xff, 0xff, 0xff, 0xff,		// Sequence
		// Output
		0x01,						// Output count
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Value
		0x01,						// Script length
		0x51,						// scriptPubKey: OP_TRUE
		0x00, 0x00, 0x00, 0x00		// Lock time
	};

	std::cout << "bitcoinconsensus version: " << bitcoinconsensus_version() << "." << std::endl;

	bitcoinconsensus_error err;

	auto p2pkResult = bitcoinconsensus_verify_script_with_amount(p2pkScriptPubKey, sizeof p2pkScriptPubKey, 0, p2pkTxTo, sizeof p2pkTxTo, 0, bitcoinconsensus_SCRIPT_FLAGS_VERIFY_ALL, &err);
	std::cout << "P2PK result: " << p2pkResult << ", error code " << err << std::endl;

	auto p2pkhResult = bitcoinconsensus_verify_script_with_amount(p2pkhScriptPubKey, sizeof p2pkhScriptPubKey, 0, p2pkhTxTo, sizeof p2pkhTxTo, 0, bitcoinconsensus_SCRIPT_FLAGS_VERIFY_ALL, &err);
	std::cout << "P2PKH result: " << p2pkhResult << ", error code " << err << std::endl;

	auto p2shResult = bitcoinconsensus_verify_script_with_amount(p2shScriptPubKey, sizeof p2shScriptPubKey, 0, p2shTxTo, sizeof p2shTxTo, 0, bitcoinconsensus_SCRIPT_FLAGS_VERIFY_ALL, &err);
	std::cout << "P2SH result: " << p2shResult << ", error code " << err << std::endl;

	auto opTrueResult = bitcoinconsensus_verify_script_with_amount(opTrueScriptPubKey, sizeof opTrueScriptPubKey, 0, opTrueTxTo, sizeof opTrueTxTo, 0, bitcoinconsensus_SCRIPT_FLAGS_VERIFY_ALL, &err);
	std::cout << "OPTRUE result: " << opTrueResult << ", error code " << err << std::endl;

	getchar();

    return 0;
}

